---
trigger:
  branches:
    include:
      - master
  paths:
    exclude:
      - README.md
      - .gitignore
      - screenshots
name: UdacityP3 Pipelines
variables:
  python.version: 3.9.1
stages:
  - stage: Provision
    jobs:
      - job: provision_azure_infrastructure
        displayName: Provision Azure Infrastructure
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: DownloadSecureFile@1
            inputs:
              secureFile: .env
          - task: InstallSSHKey@0
            inputs:
              knownHostsEntry: 'known_host'
              sshPublicKey: '$(ssh_pub_key)' 
              sshKeySecureFile: 'id_rsa'
          - task: InstallSSHKey@0
            inputs:
              knownHostsEntry: 'known_hosts'
              sshPublicKey: '$(ssh_pub_key)'
              sshKeySecureFile: 'id_rsa'
          - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
            displayName: 'Use Terraform latest'
            inputs:
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          - task: TerraformCLI@0
            displayName: 'check terraform version'
            inputs:
              command: version
          
          - task: TerraformCLI@0
            displayName: 'terraform init'
            inputs:              
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
              backendServiceArm: up3connection620
              backendAzureRmResourceGroupName: up3-storeRG360
              backendAzureRmStorageAccountName: up3store620
              backendAzureRmContainerName: up3blob620
              backendAzureRmResourceGroupLocation: centralus
              backendAzureRmKey: 'terraform.tfstate'
              allowTelemetryCollection: true

          - task: TerraformCLI@0
            displayName: 'terraform plan'
            inputs:
              command: plan
              workingDirectory: $(System.DefaultWorkingDirectory)/terraform
              environmentServiceName: 'up3connection620'
              runAzLogin: true
              secureVarsFile: 'terraform.tfvars'
              allowTelemetryCollection: true

          - task: TerraformCLI@0
            displayName: 'terraform apply'
            inputs:
              command: apply
              workingDirectory: $(System.DefaultWorkingDirectory)/terraform
              environmentServiceName: 'up3connection620'
              runAzLogin: true
              backendServiceArm: up3connection620
              backendAzureRmResourceGroupName: up3-storeRG360
              backendAzureRmStorageAccountName: up3store620
              backendAzureRmContainerName: up3blob620
              backendAzureRmResourceGroupLocation: centralus
              backendAzureRmKey: 'terraform.tfstate'
              allowTelemetryCollection: true
        
#------FakerAPI
          - task: ArchiveFiles@2
            displayName: 'Archive FakeRestAPI'
            inputs:
              rootFolderOrFile: 'automatedtesting/jmeter/fakerestapi'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
          - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
            displayName: 'Upload fakerrestapi Package'
            artifact: drop-fakerestapi
          - task: ArchiveFiles@2
            displayName: 'Archive Automation Tests'
            inputs:
              rootFolderOrFile: 'automatedtesting' 
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-automatedtests.zip' 
          - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-automatedtests.zip'
            displayName: 'Upload Test Package'
            artifact: drop-automatedtests
  - stage:
    jobs:
        - deployment: udacityp3testvm
          displayName: Deploy VM
          environment:
            name: 'TEST'
            resourceType: VirtualMachine
          pool:
            vmImage: 'Ubuntu-latest'
          strategy:
            runOnce:
              deploy:
                 steps:
                  - task: AzureRmWebAppDeployment@4
                    inputs:
                      ConnectionType: 'AzureRM'
                      azureSubscription: 'appService'
                      appType: 'webAppLinux'
                      WebAppName: 'test-appservice-udacityp3'
                      deployToSlotOrASE: true
                      ResourceGroupName: 'up3-storeRG360'
                      SlotName: 'production'
                      packageForLinux: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'

                  - task: Bash@3
                    inputs:
                      targetType: 'inline'
                      script: |
                        # Write your commands here
                
                        echo 'FakeRestAPI Running'

  - stage: postDeployment
    displayName: 'Tests'
    pool:
      vmImage: 'Ubuntu-latest'
    jobs:
    - job: runnewman
      #-----------------------------------------------Running Postman/Newman Tests-------------------------------
      steps:
        - task: Bash@3
          displayName: 'Run Postman/Newman Tests'
          inputs:
            targetType: 'inline'
            script: |
              sudo npm install -g newman reporter
              echo 'Starting Tests...'
              echo 'Running Regression Test'
              newman run automatedtesting/postman/UdacityP3Regressiontest.postman_collection.json  --delay-request 15000 --reporters cli,junit --suppress-exit-code
              echo 'Running Data Validation Test'
              newman run automatedtesting/postman/UdacityP3ValidationTest.postman_collection.json  --delay-request 12000 --reporters cli,junit --suppress-exit-code
        - task: PublishTestResults@2
          displayName: 'Publish Postman Newman Results **/newman-*.xml'
          condition: always()
          inputs:
            testResultsFormat: 'JUnit'
            testRunTitle: Data and Regression Tests
            testResultsFiles: '**/newman-*.xml'
                
                #------selenium
        - task: ArchiveFiles@2
          displayName: "Archive Selenium"
          inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/automatedtesting/selenium/login.py"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip"
              verbose: true

        - task: PublishPipelineArtifact@1
          displayName: "Publish Selenium"
          inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip"
              artifactName: "selenium"

        - task: Bash@3
          displayName: "Configure Selenium"
          inputs:
                    targetType: "inline"
                    script: |
                      #!/bin/bash
                      export LC_ALL=C
                      sudo apt-get install -y software-properties-common
                      sudo apt-add-repository -y universe
                      sudo apt-add-repository -y ppa:deadsnakes/ppa
                      sudo apt-get -y update
                      sudo apt-get install -y python3.8 python3.8-distutils python3-pip unzip chromium-browser chromium-chromedriver
                      sudo rm /usr/bin/python3
                      sudo ln -s /usr/bin/python3.8 /usr/bin/python3
                      sudo apt remove -y python3-pip
                      curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
                      sudo python3 get-pip.py
                      sudo pip3 install --upgrade pip
                      sudo pip3 install selenium      
    - deployment: test_selenium
      displayName: "Deploy and run Selenium tests"
      environment:
        name: "Selenium Test"
        resourceType: VirtualMachine
      strategy:
          runOnce:
            deploy:
              steps:
                - task: Bash@3
                  displayName: "Run Selenium tests"
                  inputs:
                    targetType: "inline"
                    script: |
                      #!/bin/bash
                      cd $(Pipeline.Workspace)/selenium
                      find . -type f ! -name 'selenium-$(Build.BuildId).zip' -delete
                      unzip -o selenium-$(Build.BuildId).zip
                      sudo mkdir -p /var/log/selenium
                      sudo chmod 777 /var/log/selenium
                      sudo python3 -u test-suite.py 2>&1 | sudo tee -a '/var/log/selenium/selenium-test-$(Build.BuildId).log'
                      cd $(System.DefaultWorkingDirectory)
                      mkdir -p log/selenium
                      sudo cp '/var/log/selenium/selenium-test-$(Build.BuildId).log' 'log/selenium/selenium-test-$(Build.BuildId).log'

                - task: PublishPipelineArtifact@1
                  displayName: "Publish Selenium logs"
                  inputs:
                    targetPath: "$(System.DefaultWorkingDirectory)/log/selenium/selenium-test-$(Build.BuildId).log"
                    artifactName: "selenium-logs"  
                #-----Log Anaylytics

                #------jMeter
    - job: JMeterTest
      displayName: Test JMeter
      steps:
      - checkout: self
      - task: Bash@3
        displayName: Install JMeter
        inputs:
          targetType: 'inline'
          script: |
            sudo apt-get install openjdk-11-jre-headless -y
            java -version
            wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.4.1.tgz -O jmeter.tgz
            tar xzvf jmeter.tgz
            apache-jmeter-5.4.1/bin/jmeter --version
            pwd
            ls -la
      - task: Bash@3
        displayName: JMeter Stress Test
        inputs:
          targetType: 'inline'
          script: |
            sudo mkdir stresstest-html-report
            ls -la
            rm -rf *.csv stress-test-html-report/*
            echo "Running JMeter tests Now"
            apache-jmeter-5.4.1/bin/jmeter -n -t automatedtesting/jmeter/stresstest.jmx \
            -l StressTest_Results.csv -e -f -o stresstest-html-report/
           
            ls -la
      - task: Bash@3
        displayName: JMeter Endurance Test
        inputs:
          targetType: 'inline'
          script: |
            mkdir endurancetest-html-report
            ls -la 
            rm -rf *.csv endurancetest-html-report/*
            apache-jmeter-5.4.1/bin/jmeter -n -t automatedtesting/jmeter/endurancetest.jmx \
            -l EnduranceTest_Results.csv -e -f -o endurancetest-html-report/
          
            ls -la