---
trigger:
  branches:
    include:
      - master
  paths:
    exclude:
      - README.md
      - .gitignore
      - screenshots
name: UdacityP3 Pipelines
variables:
  python.version: 3.9.1
stages:
  - stage: Provision
    jobs:
      - job: provision_azure_infrastructure
        displayName: Provision Azure Infrastructure
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: DownloadSecureFile@1
            inputs:
              secureFile: .env
          - task: InstallSSHKey@0
            inputs:
              knownHostsEntry: 'known_host'
              sshPublicKey: '$(ssh_pub_key)' 
              sshKeySecureFile: 'id_rsa'
          - task: InstallSSHKey@0
            inputs:
              knownHostsEntry: 'known_hosts'
              sshPublicKey: '$(ssh_pub_key)'
              sshKeySecureFile: 'id_rsa'
          - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
            displayName: 'Use Terraform latest'
            inputs:
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          - task: TerraformCLI@0
            displayName: 'check terraform version'
            inputs:
              command: version
          
          - task: TerraformCLI@0
            displayName: 'terraform init'
            inputs:              
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
              backendServiceArm: up3connection620
              backendAzureRmResourceGroupName: up3-storeRG360
              backendAzureRmStorageAccountName: up3store620
              backendAzureRmContainerName: up3blob620
              backendAzureRmResourceGroupLocation: centralus
              backendAzureRmKey: 'terraform.tfstate'
              allowTelemetryCollection: true

          - task: TerraformCLI@0
            displayName: 'terraform plan'
            inputs:
              command: plan
              workingDirectory: $(System.DefaultWorkingDirectory)/terraform
              environmentServiceName: 'up3connection620'
              runAzLogin: true
              secureVarsFile: 'terraform.tfvars'
              allowTelemetryCollection: true

          - task: TerraformCLI@0
            displayName: 'terraform apply'
            inputs:
              command: apply
              workingDirectory: $(System.DefaultWorkingDirectory)/terraform
              environmentServiceName: 'up3connection620'
              runAzLogin: true
              backendServiceArm: up3connection620
              backendAzureRmResourceGroupName: up3-storeRG360
              backendAzureRmStorageAccountName: up3store620
              backendAzureRmContainerName: up3blob620
              backendAzureRmResourceGroupLocation: centralus
              backendAzureRmKey: 'terraform.tfstate'
              allowTelemetryCollection: true
        
#------FakerAPI
          - task: ArchiveFiles@2
            displayName: 'Archive FakeRestAPI'
            inputs:
              rootFolderOrFile: 'automatedtesting/jmeter/fakerestapi'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
          - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
            displayName: 'Upload fakerrestapi Package'
            artifact: drop-fakerestapi
          - task: ArchiveFiles@2
            displayName: 'Archive Automation Tests'
            inputs:
              rootFolderOrFile: 'automatedtesting' 
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-automatedtests.zip' 
          - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-automatedtests.zip'
            displayName: 'Upload Test Package'
            artifact: drop-automatedtests
  - stage:
    jobs:
        - deployment: udacityp3testvm
          displayName: Deploy VM
          environment:
            name: 'TEST'
            resourceType: VirtualMachine
          pool:
            vmImage: 'Ubuntu-latest'
          strategy:
            runOnce:
              deploy:
                 steps:
                  - task: AzureRmWebAppDeployment@4
                    inputs:
                      ConnectionType: 'AzureRM'
                      azureSubscription: 'up3connection620'
                      appType: 'webAppLinux'
                      WebAppName: 'test-appservice-udacityp3'
                      deployToSlotOrASE: true
                      ResourceGroupName: 'up3-storeRG360'
                      SlotName: 'production'
                      packageForLinux: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'

                  - task: Bash@3
                    inputs:
                      targetType: 'inline'
                      script: |
                        # Write your commands here
                
                        echo 'FakeRestAPI Running'

  #- stage: postDeployment
    #displayName: 'Post-Deployment'
    #pool:
      #vmImage: 'Ubuntu-latest'
      #jobs:
      #- job: runnewman            

                #------postman/newman
                #------selenium
                #-----Log Anaylytics
                #------jMeter
                #------Destroy 
          
