---
trigger:
  branches:
    include:
      - master
  paths:
    exclude:
      - README.md
      - .gitignore
      - screenshots
name: UdacityP3 Pipelines
variables:
  python.version: 3.9.1
stages:
  - stage: Provision
    jobs:
      - job: provision_azure_infrastructure
        displayName: Provision Azure Infrastructure
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: DownloadSecureFile@1
            inputs:
              secureFile: .env
          - task: InstallSSHKey@0
            inputs:
              knownHostsEntry: 'known_host'
              sshPublicKey: '$(ssh_pub_key)' 
              sshKeySecureFile: 'id_rsa'
          - task: InstallSSHKey@0
            inputs:
              knownHostsEntry: 'known_hosts'
              sshPublicKey: '$(ssh_pub_key)'
              sshKeySecureFile: 'id_rsa'
          - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
            displayName: 'Use Terraform latest'
            inputs:
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          - task: TerraformCLI@0
            displayName: 'check terraform version'
            inputs:
              command: version
          
          - task: TerraformCLI@0
            displayName: 'terraform init'
            inputs:              
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
              backendServiceArm: up3connection620
              backendAzureRmResourceGroupName: up3-storeRG360
              backendAzureRmStorageAccountName: up3store620
              backendAzureRmContainerName: up3blob620
              backendAzureRmResourceGroupLocation: centralus
              backendAzureRmKey: 'terraform.tfstate'
              allowTelemetryCollection: true

          - task: TerraformCLI@0
            displayName: 'terraform plan'
            inputs:
              command: plan
              workingDirectory: $(System.DefaultWorkingDirectory)/terraform
              environmentServiceName: 'up3connection620'
              runAzLogin: true
              secureVarsFile: 'terraform.tfvars'
              allowTelemetryCollection: true

          - task: TerraformCLI@0
            displayName: 'terraform apply'
            inputs:
              command: apply
              workingDirectory: $(System.DefaultWorkingDirectory)/terraform
              environmentServiceName: 'up3connection620'
              runAzLogin: true
              backendServiceArm: up3connection620
              backendAzureRmResourceGroupName: up3-storeRG360
              backendAzureRmStorageAccountName: up3store620
              backendAzureRmContainerName: up3blob620
              backendAzureRmResourceGroupLocation: centralus
              backendAzureRmKey: 'terraform.tfstate'
              allowTelemetryCollection: true
        
#------FakerAPI
          - task: ArchiveFiles@2
            displayName: 'Archive FakeRestAPI'
            inputs:
              rootFolderOrFile: 'automatedtesting/jmeter/fakerestapi'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
          - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
            displayName: 'Upload fakerrestapi Package'
            artifact: drop-fakerestapi
          - task: ArchiveFiles@2
            displayName: 'Archive Automation Tests'
            inputs:
              rootFolderOrFile: 'automatedtesting' 
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-automatedtests.zip' 
          - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-automatedtests.zip'
            displayName: 'Upload Test Package'
            artifact: drop-automatedtests
  - stage:
    jobs:
        - deployment: udacityp3testvm
          displayName: Deploy VM
          environment:
            name: 'TEST'
            resourceType: VirtualMachine
          pool:
            vmImage: 'Ubuntu-latest'
          strategy:
            runOnce:
              deploy:
                 steps:
                  - task: AzureRmWebAppDeployment@4
                    inputs:
                      ConnectionType: 'AzureRM'
                      azureSubscription: 'appService'
                      appType: 'webAppLinux'
                      WebAppName: 'test-appservice-udacityp3'
                      deployToSlotOrASE: true
                      ResourceGroupName: 'up3-storeRG360'
                      SlotName: 'production'
                      packageForLinux: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'

                  - task: Bash@3
                    inputs:
                      targetType: 'inline'
                      script: |
                        # Write your commands here
                
                        echo 'FakeRestAPI Running'

  - stage: postDeployment
    displayName: 'Tests'
    pool:
      vmImage: 'Ubuntu-latest'
    jobs:
    - job: runnewman
      #-----------------------------------------------Running Postman/Newman Tests-------------------------------
      steps:
        - task: Bash@3
          displayName: 'Run Postman/Newman Tests'
          inputs:
            targetType: 'inline'
            script: |
              sudo npm install -g newman reporter
              echo 'Starting Tests...'
              echo 'Running Regression Test'
              newman run automatedtesting/postman/UdacityP3Regressiontest.postman_collection.json  --delay-request 15000 --reporters cli,junit --suppress-exit-code
              echo 'Running Data Validation Test'
              newman run automatedtesting/postman/UdacityP3ValidationTest.postman_collection.json  --delay-request 12000 --reporters cli,junit --suppress-exit-code
        - task: PublishTestResults@2
          displayName: 'Publish Postman Newman Results **/newman-*.xml'
          condition: always()
          inputs:
            testResultsFormat: 'JUnit'
            testRunTitle: Data and Regression Tests
            testResultsFiles: '**/newman-*.xml'
                
                #------selenium
                
                #-----Log Anaylytics

                #------jMeter
    - job: JMeterTest
      displayName: JMeterTesting
      steps:
      - task: Bash@3
        displayName: Install JMeter
        inputs:
          targetType: 'inline'
          script: |
           apt-get install openjdk-11-jre-headless -y
            java -version
            wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.2.1.tgz -O jmeter.tgz
            tar xzvf jmeter.tgz
            apache-jmeter-5.4.1/bin/jmeter --version
            mkdir -p log/jmeter
            pwd
            ls -la
      - task: Bash@3
        displayName: UP3 JMeter Stress Test
        inputs:
          targetType: 'inline'
          script: |
           sudo mkdir up3stresstest-html-report
            rm -rf *.csv up3stress-test-html-report/*
            echo "Running JMeter tests Now"
             apache-jmeter-5.4.1/bin/jmeter -n -t automatedtesting/jmeter/stresstest.jmx \
                                   #  -l log/jmeter/stresstest-result.csv \
                                   #  -e -f -o log/jmeter/stresstest-report.html \
                                   #  -j log/jmeter/jmeter-stresstest.log
      - task: Bash@3
        displayName: UP3 JMeter Endurance Test
        inputs:
          targetType: 'inline'
          script: |
           sudo mkdir up3endurancetest-html-report
            rm -rf *.csv up3endurancetest-html-report/*
           apache-jmeter-5.4.1/bin/jmeter -n -t automatedtesting/jmeter/endurancetest.jmx \
                                    # -l log/jmeter/endurancetest-result.csv \
                                    # -e -f -o log/jmeter/endurancetest-report.html \
                                    # -j log/jmeter/jmeter-endurance-test.log
                #------Destroy 
      - task: ArchiveFiles@2
        displayName: Archive JMeter stress test HTML report
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stresstest-report.html'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stresstest-html-report-$(Build.BuildId).zip'
          verbose: true
      - task: ArchiveFiles@2
        displayName: Archive JMeter endurance test HTML report
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurancetest-report.html'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurancetesthtml-report-$(Build.BuildId).zip'
          verbose: true
      - task: Bash@3
        displayName: Clean Up Tests
        inputs:
          targetType: 'inline'
          script: |
            rm -rf log/jmeter/stresstest-report.html
            rm -rf log/jmeter/endurancetest-report.html
            cd log/jmeter
            pwd
            ls -la
      - task: PublishPipelineArtifact@1
        displayName: Publish JMeter logs
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/log/jmeter'
          artifactName: 'drop-jmeter-logs'    
